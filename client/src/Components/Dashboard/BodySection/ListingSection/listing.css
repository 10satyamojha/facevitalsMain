import React, { useState, useEffect } from 'react'

import { 
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, 
  BarChart, Bar, PieChart, Pie, Cell 
} from 'recharts'
import { FaArrowUp, FaArrowDown, FaEquals } from 'react-icons/fa'

const Analytics = () => {
  const [vitalHistory, setVitalHistory] = useState([])
  const [timeRange, setTimeRange] = useState('7days')
  const [selectedVital, setSelectedVital] = useState('heartRate')

  useEffect(() => {
    const history = localStorage.getItem('vitalHistory')
    if (history) {
      setVitalHistory(JSON.parse(history))
    }
  }, [])

  const chartData = vitalHistory.slice(0, 10).reverse().map((vital, index) => ({
    name: `Day ${index + 1}`,
    heartRate: parseInt(vital.heartRate) || 0,
    systolic: parseInt(vital.bloodPressureSystolic) || 0,
    diastolic: parseInt(vital.bloodPressureDiastolic) || 0,
    temperature: parseFloat(vital.temperature) || 0,
    oxygenSaturation: parseInt(vital.oxygenSaturation) || 0,
    weight: parseFloat(vital.weight) || 0
  }))

  const getTrend = (data, key) => {
    if (data.length < 2) return { trend: 'stable', percentage: 0 }
    
    const latest = data[data.length - 1][key]
    const previous = data[data.length - 2][key]
    
    if (latest > previous) return { trend: 'up', percentage: ((latest - previous) / previous * 100).toFixed(1) }
    if (latest < previous) return { trend: 'down', percentage: ((previous - latest) / previous * 100).toFixed(1) }
    return { trend: 'stable', percentage: 0 }
  }

  const heartRateTrend = getTrend(chartData, 'heartRate')
  const weightTrend = getTrend(chartData, 'weight')
  const tempTrend = getTrend(chartData, 'temperature')

  const healthScoreData = [
    { name: 'Excellent', value: 25, color: '#27ae60' },
    { name: 'Good', value: 45, color: '#3498db' },
    { name: 'Average', value: 20, color: '#f39c12' },
    { name: 'Poor', value: 10, color: '#e74c3c' }
  ]

  return (
    <div className="analytics">
      <div className="analyticsHeader">
        <h1>Health Analytics</h1>
        <div className="controls">
          <select 
            value={timeRange} 
            onChange={(e) => setTimeRange(e.target.value)}
            className="timeRangeSelect"
          >
            <option value="7days">Last 7 Days</option>
            <option value="30days">Last 30 Days</option>
            <option value="90days">Last 90 Days</option>
          </select>
        </div>
      </div>

      <div className="trendsGrid">
        <div className="trendCard">
          <div className="trendHeader">
            <h3>Heart Rate Trend</h3>
            <div className={`trendIndicator ${heartRateTrend.trend}`}>
              {heartRateTrend.trend === 'up' && <FaArrowUp />}
              {heartRateTrend.trend === 'down' && <FaArrowDown />}
              {heartRateTrend.trend === 'stable' && <FaEquals />}
              <span>{heartRateTrend.percentage}%</span>
            </div>
          </div>
          <p className="currentValue">
            {chartData.length > 0 ? chartData[chartData.length - 1].heartRate : '--'} BPM
          </p>
        </div>

        <div className="trendCard">
          <div className="trendHeader">
            <h3>Weight Trend</h3>
            <div className={`trendIndicator ${weightTrend.trend}`}>
              {weightTrend.trend === 'up' && <FaArrowUp />}
              {weightTrend.trend === 'down' && <FaArrowDown />}
              {weightTrend.trend === 'stable' && <FaEquals />}
              <span>{weightTrend.percentage}%</span>
            </div>
          </div>
          <p className="currentValue">
            {chartData.length > 0 ? chartData[chartData.length - 1].weight : '--'} kg
          </p>
        </div>

        <div className="trendCard">
          <div className="trendHeader">
            <h3>Temperature Trend</h3>
            <div className={`trendIndicator ${tempTrend.trend}`}>
              {tempTrend.trend === 'up' && <FaArrowUp />}
              {tempTrend.trend === 'down' && <FaArrowDown />}
              {tempTrend.trend === 'stable' && <FaEquals />}
              <span>{tempTrend.percentage}%</span>
            </div>
          </div>
          <p className="currentValue">
            {chartData.length > 0 ? chartData[chartData.length - 1].temperature : '--'}Â°C
          </p>
        </div>
      </div>

      <div className="chartsSection">
        <div className="chartContainer">
          <h3>Vital Signs Over Time</h3>
          <div className="chartControls">
            <select 
              value={selectedVital} 
              onChange={(e) => setSelectedVital(e.target.value)}
            >
              <option value="heartRate">Heart Rate</option>
              <option value="systolic">Blood Pressure (Systolic)</option>
              <option value="temperature">Temperature</option>
              <option value="weight">Weight</option>
            </select>
          </div>
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Line 
                type="monotone" 
                dataKey={selectedVital} 
                stroke="#3498db" 
                strokeWidth={3}
                dot={{ fill: '#3498db', strokeWidth: 2, r: 6 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="chartContainer">
          <h3>Health Score Distribution</h3>
          <ResponsiveContainer width="100%" height={400}>
            <PieChart>
              <Pie
                data={healthScoreData}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                outerRadius={120}
                fill="#8884d8"
                dataKey="value"
              >
                {healthScoreData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className="comparisonChart">
        <h3>Weekly Comparison</h3>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={chartData.slice(-7)}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Bar dataKey="heartRate" fill="#e74c3c" name="Heart Rate" />
            <Bar dataKey="oxygenSaturation" fill="#27ae60" name="Oxygen Sat." />
          </BarChart>
        </ResponsiveContainer>
      </div>

      <div className="insightsSection">
        <h3>Health Insights</h3>
        <div className="insightsList">
          <div className="insightItem positive">
            <h4>Good Progress</h4>
            <p>Your heart rate has been stable within the normal range for the past week.</p>
          </div>
          <div className="insightItem warning">
            <h4>Monitor Weight</h4>
            <p>Consider tracking your weight more consistently for better health monitoring.</p>
          </div>
          <div className="insightItem info">
            <h4>Recommendation</h4>
            <p>Continue monitoring your vitals daily for comprehensive health tracking.</p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Analytics
